#!/usr/bin/env python
# https://en.wikipedia.org/wiki/List_of_video_game_console_palettes

import numpy as np
from PIL import Image
import sys


ntsc_table = {
    0x0: {
        0x0: 0x000000, 0x1: 0x000440, 0x2: 0x702800, 0x3: 0x841800,
        0x4: 0x880000, 0x5: 0x78005c, 0x6: 0x480078, 0x7: 0x140084,
        0x8: 0x000088, 0x9: 0x00187c, 0xa: 0x002c5c, 0xb: 0x003c2c,
        0xc: 0x003c00, 0xd: 0x143800, 0xe: 0x2c3000, 0xf: 0x442800,
    },
    0x2: {
        0x0: 0x404040, 0x1: 0x646410, 0x2: 0x844414, 0x3: 0x983418,
        0x4: 0x9c2020, 0x5: 0x8c2074, 0x6: 0x602090, 0x7: 0x302098,
        0x8: 0x1c209c, 0x9: 0x1c3890, 0xa: 0x1c4c78, 0xb: 0x1c5c48,
        0xc: 0x205c20, 0xd: 0x345c1c, 0xe: 0x4c501c, 0xf: 0x644818,
    },
    0x4: {
        0x0: 0x6c6c6c, 0x1: 0x848424, 0x2: 0x985c28, 0x3: 0xac5030,
        0x4: 0xb03c3c, 0x5: 0xa03c88, 0x6: 0x783ca4, 0x7: 0x4c3cac,
        0x8: 0x3840b0, 0x9: 0x3854a8, 0xa: 0x386890, 0xb: 0x387c64,
        0xc: 0x407c40, 0xd: 0x507c38, 0xe: 0x687034, 0xf: 0x846830,
    },
    0x6: {
        0x0: 0x909090, 0x1: 0xa0a034, 0x2: 0xac783c, 0x3: 0xc06848,
        0x4: 0xc05858, 0x5: 0xb0589c, 0x6: 0x8c58b8, 0x7: 0x6858c0,
        0x8: 0x505cc0, 0x9: 0x5070bc, 0xa: 0x5084ac, 0xb: 0x509c80,
        0xc: 0x5c9c5c, 0xd: 0x6c9850, 0xe: 0x848c4c, 0xf: 0xa08444,
    },
    0x8: {
        0x0: 0xb0b0b0, 0x1: 0xb8b840, 0x2: 0xbc8c4c, 0x3: 0xd0805c,
        0x4: 0xd07070, 0x5: 0xc070b0, 0x6: 0xa070cc, 0x7: 0x7c70d0,
        0x8: 0x6874d0, 0x9: 0x6888cc, 0xa: 0x689cc0, 0xb: 0x68b494,
        0xc: 0x74b474, 0xd: 0x84b468, 0xe: 0x9ca864, 0xf: 0xb89c58,
    },
    0xa: {
        0x0: 0xc8c8c8, 0x1: 0xd0d050, 0x2: 0xcca05c, 0x3: 0xe09470,
        0x4: 0xe08888, 0x5: 0xd084c0, 0x6: 0xb484dc, 0x7: 0x9488e0,
        0x8: 0x7c8ce0, 0x9: 0x7c9cdc, 0xa: 0x7cb4d4, 0xb: 0x7cd0ac,
        0xc: 0x8cd08c, 0xd: 0x9ccc7c, 0xe: 0xb4c078, 0xf: 0xd0b46c,
    },
    0xc: {
        0x0: 0xdcdcdc, 0x1: 0xe8e85c, 0x2: 0xdcb468, 0x3: 0xeca880,
        0x4: 0xeca0a0, 0x5: 0xdc9cd0, 0x6: 0xc49cec, 0x7: 0xa8a0ec,
        0x8: 0x90a4ec, 0x9: 0x90b4ec, 0xa: 0x90cce8, 0xb: 0x90e4c0,
        0xc: 0xa4e4a4, 0xd: 0xb4e490, 0xe: 0xccd488, 0xf: 0xe8cc7c,
    },
    0xe: {
        0x0: 0xececec, 0x1: 0xfcfc68, 0x2: 0xecc878, 0x3: 0xfcbc94,
        0x4: 0xfcb4b4, 0x5: 0xecb0e0, 0x6: 0xd4b0fc, 0x7: 0xbcb4fc,
        0x8: 0xa4b8fc, 0x9: 0xa4c8fc, 0xa: 0xa4e0fc, 0xb: 0xa4fcd4,
        0xc: 0xb8fcb8, 0xd: 0xc8fca4, 0xe: 0xe0ec9c, 0xf: 0xfce08c,
    },
}

pal_table = {
    0x0: {
        0x0: 0x000000, 0x1: 0x000000, 0x2: 0x805800, 0x3: 0x445c00,
        0x4: 0x703400, 0x5: 0x006414, 0x6: 0x700014, 0x7: 0x005c5c,
        0x8: 0x70005c, 0x9: 0x003c70, 0xa: 0x580070, 0xb: 0x002070,
        0xc: 0x3c0080, 0xd: 0x000088, 0xe: 0x000000, 0xf: 0x000000,
    },
    0x2: {
        0x0: 0x282828, 0x1: 0x282828, 0x2: 0x947020, 0x3: 0x5c7820,
        0x4: 0x885020, 0x5: 0x208034, 0x6: 0x882034, 0x7: 0x207474,
        0x8: 0x842074, 0x9: 0x1c5888, 0xa: 0x6c2088, 0xb: 0x1c3c88,
        0xc: 0x542094, 0xd: 0x20209c, 0xe: 0x282828, 0xf: 0x282828,
    },
    0x4: {
        0x0: 0x505050, 0x1: 0x505050, 0x2: 0xa8843c, 0x3: 0x74903c,
        0x4: 0xa0683c, 0x5: 0x3c9850, 0x6: 0xa03c50, 0x7: 0x3c8c8c,
        0x8: 0x943c88, 0x9: 0x3874a0, 0xa: 0x803ca0, 0xb: 0x3858a0,
        0xc: 0x6c3ca8, 0xd: 0x3c3cb0, 0xe: 0x505050, 0xf: 0x505050,
    },
    0x6: {
        0x0: 0x747474, 0x1: 0x747474, 0x2: 0xbc9c58, 0x3: 0x8cac58,
        0x4: 0xb48458, 0x5: 0x58b06c, 0x6: 0xb4586c, 0x7: 0x58a4a4,
        0x8: 0xa8589c, 0x9: 0x508cb4, 0xa: 0x9458b4, 0xb: 0x5074b4,
        0xc: 0x8058bc, 0xd: 0x5858c0, 0xe: 0x747474, 0xf: 0x747474,
    },
    0x8: {
        0x0: 0x949494, 0x1: 0x949494, 0x2: 0xccac70, 0x3: 0xa0c070,
        0x4: 0xc89870, 0x5: 0x70c484, 0x6: 0xc87084, 0x7: 0x70b8b8,
        0x8: 0xb470b0, 0x9: 0x68a4c8, 0xa: 0xa470c8, 0xb: 0x6888c8,
        0xc: 0x9470cc, 0xd: 0x7070d0, 0xe: 0x949494, 0xf: 0x949494,
    },
    0xa: {
        0x0: 0xb4b4b4, 0x1: 0xb4b4b4, 0x2: 0xdcc084, 0x3: 0xb0d484,
        0x4: 0xdcac84, 0x5: 0x84d89c, 0x6: 0xdc849c, 0x7: 0x84c8c8,
        0x8: 0xc484c0, 0x9: 0x7cb8dc, 0xa: 0xb484dc, 0xb: 0x7ca0dc,
        0xc: 0xa884dc, 0xd: 0x8484e0, 0xe: 0xb4b4b4, 0xf: 0xb4b4b4,
    },
    0xc: {
        0x0: 0xd0d0d0, 0x1: 0xd0d0d0, 0x2: 0xecd09c, 0x3: 0xc4e89c,
        0x4: 0xecc09c, 0x5: 0x9ce8b4, 0x6: 0xec9cb4, 0x7: 0x9cdcdc,
        0x8: 0xd09cd0, 0x9: 0x90ccec, 0xa: 0xc49cec, 0xb: 0x90b4ec,
        0xc: 0xb89cec, 0xd: 0x9c9cec, 0xe: 0xd0d0d0, 0xf: 0xd0d0d0,
    },
    0xe: {
        0x0: 0xececec, 0x1: 0xececec, 0x2: 0xfce0b0, 0x3: 0xd4fcb0,
        0x4: 0xfcd4b0, 0x5: 0xb0fcc8, 0x6: 0xfcb0c8, 0x7: 0xb0ecec,
        0x8: 0xe0b0e0, 0x9: 0xa4e0fc, 0xa: 0xd4b0fc, 0xb: 0xa4c8fc,
        0xc: 0xc8b0fc, 0xd: 0xb0b0fc, 0xe: 0xececec, 0xf: 0xececec,
    },
}

secam_table = {
    0x0: 0x000000,
    0x1: 0x2121ff,
    0x2: 0xf03c79,
    0x3: 0xff50ff,
    0x4: 0x7fff00,
    0x5: 0x7fffff,
    0x6: 0xffff3f,
    0x7: 0x000fff,
}

def colu_to_rgb(colu, format='NTSC'):
    lum = (colu >> 0) & 0xf
    col = (colu >> 4) & 0xf
    if format == 'SECAM':
        code = secam_table[lum]
    else:
        code = pal_table[lum][col] if format == 'PAL' else ntsc_table[lum][col]
    return ((code >> 16) & 0xff, (code >> 8) & 0xff, code & 0xff)

def convert_colu_to_rgb(array, format='NTSC'):
    ret = map(lambda x: colu_to_rgb(x, format), array.flatten().tolist())
    return np.array(ret, dtype='u1').reshape(array.shape + (3,))

def convert_binary_to_images(
        filename, width=228, height=262,
        hblank=68, vsync=3, vblank=37, overscan=30, format='NTSC'):
    with open(filename, 'rb') as fh:
        data = map(lambda x: ord(x), fh.read())
    size = width * height
    for i in range(len(data) / size):
        array = np.array(data[i:(i + 1) * size], dtype='u4')
        array = array.reshape((height, width))             # reshape
        array = array[(vsync + vblank):-overscan, hblank:] # clipping
        array = convert_colu_to_rgb(array, format=format)  # colu to rgb
        image = Image.fromarray(array)
        image.save('{}_{}.png'.format(filename.replace('.bin', ''), i))

if __name__ == '__main__':
    if len(sys.argv) < 2:
        print('usage: {} <screen-bin>'.format(sys.argv[0]))
        quit()
    filename = sys.argv[1]
    convert_binary_to_images(filename, width=160, height=262, hblank=0)
